GO
USE mk_st35
GO

--DROPPING MY TABLES
DROP TABLE IF EXISTS GYM_SIGNUP
DROP TABLE IF EXISTS GYM_STAFF
DROP TABLE IF EXISTS GYM_CUSTOMER
DROP TABLE IF EXISTS GYM_EMPLOYEE
DROP TABLE IF EXISTS GYM_FACILITY
DROP TABLE IF EXISTS GYM_REGION
DROP TABLE IF EXISTS GYM_MEMBERSHIP

--DROP VIEWS
DROP VIEW IF EXISTS VIEW_MEMBERSHIPS
DROP VIEW IF EXISTS VIEW_PAYROLL

--DROP PROCEDURES
DROP PROCEDURE IF EXISTS SP_ADD_GYM_CUSTOMER
DROP PROCEDURE IF EXISTS SP_ADD_GYM_EMPLOYEE
DROP PROCEDURE IF EXISTS SP_ADD_GYM_FACILITY
DROP PROCEDURE IF EXISTS SP_ADD_GYM_REGION
DROP PROCEDURE IF EXISTS SP_ADD_GYM_SIGNUP
DROP PROCEDURE IF EXISTS SP_ADD_GYM_STAFF
DROP PROCEDURE IF EXISTS SP_ADD_GYM_MEMBERSHIP
DROP PROCEDURE IF EXISTS SP_DATA_POPULATION
GO
--CREATE TABLES
CREATE TABLE GYM_REGION(
	REGION_ID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	REGION_NAME VARCHAR(25)
)

CREATE TABLE GYM_CUSTOMER(
	CUSTOMER_ID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	CUSTOMER_NAME_F VARCHAR(25),
	CUSTOMER_NAME_L VARCHAR(25),
	CUSTOMER_DOB DATE
)

CREATE TABLE GYM_MEMBERSHIP(
	MEMBERSHIP_ID INT PRIMARY KEY IDENTITY(1,1),
	MEMBERSHIP_TYPE VARCHAR(25),
	MEMBERSHIP_PRICE FLOAT
)

CREATE TABLE GYM_SIGNUP(
	REGION_ID INT FOREIGN KEY REFERENCES GYM_REGION(REGION_ID),
	MEMBERSHIP_ID INT FOREIGN KEY REFERENCES GYM_MEMBERSHIP(MEMBERSHIP_ID),
	CUSTOMER_ID INT FOREIGN KEY REFERENCES GYM_CUSTOMER(CUSTOMER_ID),
	SIGNUP_START DATE,
	SIGNUP_END DATE,
	PRIMARY KEY(REGION_ID, MEMBERSHIP_ID, CUSTOMER_ID)
)


CREATE TABLE GYM_FACILITY(
	FACILITY_ID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	REGION_ID INT FOREIGN KEY REFERENCES GYM_REGION(REGION_ID),
	FACILITY_NAME VARCHAR(25),
	FACILITY_ADDRESS VARCHAR(30)
)

CREATE TABLE GYM_EMPLOYEE(
	EMPLOYEE_ID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	EMPLOYEE_NAME_F VARCHAR(25),
	EMPLOYEE_NAME_L VARCHAR(25),
	EMPLOYEE_DOB VARCHAR(25)
)

CREATE TABLE GYM_STAFF(
	FACILITY_ID INT FOREIGN KEY REFERENCES GYM_FACILITY(FACILITY_ID),
	EMPLOYEE_ID INT FOREIGN KEY REFERENCES GYM_EMPLOYEE(EMPLOYEE_ID),
	STAFF_ROLE VARCHAR(25),
	STAFF_HOURLY_PAY FLOAT,
	PRIMARY KEY(FACILITY_ID, EMPLOYEE_ID)
)


--CREATE INDEX ON GYM STAFF
CREATE UNIQUE INDEX MY_INDEX ON GYM_STAFF(FACILITY_ID, EMPLOYEE_ID)

GO
--CREATE PROCEDURES
CREATE PROCEDURE SP_ADD_GYM_CUSTOMER @CUSTOMER_NAME_F VARCHAR(25), @CUSTOMER_NAME_L VARCHAR(25), @DOB DATE
AS 
BEGIN
	IF NOT EXISTS(SELECT CUSTOMER_NAME_F, CUSTOMER_NAME_L FROM GYM_CUSTOMER WHERE CUSTOMER_NAME_F = @CUSTOMER_NAME_F AND CUSTOMER_NAME_L = @CUSTOMER_NAME_L)
	BEGIN
		INSERT INTO GYM_CUSTOMER(CUSTOMER_NAME_F, CUSTOMER_NAME_L, CUSTOMER_DOB)
		VALUES (@CUSTOMER_NAME_F, @CUSTOMER_NAME_L, @DOB)
	END
END
GO

CREATE PROCEDURE SP_ADD_GYM_EMPLOYEE @EMPLOYEE_NAME_F VARCHAR(25), @EMPLOYEE_NAME_L VARCHAR(25), @DOB DATE
AS 
BEGIN
	IF NOT EXISTS(SELECT EMPLOYEE_NAME_F, EMPLOYEE_NAME_L FROM GYM_EMPLOYEE WHERE EMPLOYEE_NAME_F = @EMPLOYEE_NAME_F AND EMPLOYEE_NAME_L = @EMPLOYEE_NAME_L)
	BEGIN
		INSERT INTO GYM_EMPLOYEE(EMPLOYEE_NAME_F, EMPLOYEE_NAME_L, EMPLOYEE_DOB)
		VALUES (@EMPLOYEE_NAME_F, @EMPLOYEE_NAME_L, @DOB)
	END
END
GO

CREATE PROCEDURE SP_ADD_GYM_REGION @REGION_NAME VARCHAR(25)
AS
BEGIN
	IF NOT EXISTS(SELECT REGION_NAME FROM GYM_REGION WHERE REGION_NAME = @REGION_NAME)
	BEGIN
		INSERT INTO GYM_REGION(REGION_NAME)
		VALUES (@REGION_NAME)
	END
END
GO

--USES NATURAL VALUE: REGION_NAME INSTEAD OF ID
CREATE PROCEDURE SP_ADD_GYM_FACILITY @FACILITY_NAME VARCHAR(25), @REGION_NAME VARCHAR(25), @FACILITY_ADDRESS VARCHAR(30)
AS
BEGIN
	IF NOT EXISTS(SELECT FACILITY_NAME, FACILITY_ADDRESS FROM GYM_FACILITY WHERE FACILITY_NAME = @FACILITY_NAME AND FACILITY_ADDRESS = @FACILITY_ADDRESS)
	BEGIN
		DECLARE  @REGION_ID INT
		SET @REGION_ID = (SELECT REGION_ID FROM GYM_REGION WHERE REGION_NAME = @REGION_NAME)
		INSERT INTO GYM_FACILITY(FACILITY_NAME, REGION_ID, FACILITY_ADDRESS)
		VALUES (@FACILITY_NAME, @REGION_ID, @FACILITY_ADDRESS)
	END
END
GO

--NATURAL VALUES FOR CUSTOMER FIRST NAME, LAST NAME AND MEMBERSHIP TYPE
--ALSO REGION_NAME INSTEAD OF REGION_ID TO SPECIFY REGION OF VALIDITY
CREATE PROCEDURE SP_ADD_GYM_SIGNUP @CUSTOMER_NAME_F VARCHAR(25),@CUSTOMER_NAME_L VARCHAR(25), @MEMBERSHIP_TYPE VARCHAR(25), @REGION_NAME VARCHAR(25), @START DATE, @END DATE
AS
BEGIN
	DECLARE @CUSTOMER_ID INT
	SET @CUSTOMER_ID = (SELECT CUSTOMER_ID FROM GYM_CUSTOMER WHERE CUSTOMER_NAME_F = @CUSTOMER_NAME_F AND CUSTOMER_NAME_L = @CUSTOMER_NAME_L)
	
	DECLARE @MEMBERSHIP_ID INT
	SET @MEMBERSHIP_ID = (SELECT MEMBERSHIP_ID FROM GYM_MEMBERSHIP WHERE MEMBERSHIP_TYPE = @MEMBERSHIP_TYPE)

	DECLARE @REGION_ID INT
	SET @REGION_ID = (SELECT REGION_ID FROM GYM_REGION WHERE REGION_NAME = @REGION_NAME)
	INSERT INTO GYM_SIGNUP(CUSTOMER_ID, MEMBERSHIP_ID, REGION_ID, SIGNUP_START, SIGNUP_END)
	VALUES (@CUSTOMER_ID, @MEMBERSHIP_ID, @REGION_ID, @START, @END)
END
GO

CREATE PROCEDURE SP_ADD_GYM_STAFF @EMPLOYEE_NAME_F VARCHAR(25), @EMPLOYEE_NAME_L VARCHAR(25), @FACILITY_NAME VARCHAR(25), @STAFF_ROLE VARCHAR(25), @STAFF_HOURLY_PAY FLOAT
AS
BEGIN
	DECLARE @EMPLOYEE_ID INT 
	SET @EMPLOYEE_ID = (SELECT EMPLOYEE_ID FROM GYM_EMPLOYEE WHERE EMPLOYEE_NAME_F = @EMPLOYEE_NAME_F AND EMPLOYEE_NAME_L = @EMPLOYEE_NAME_L)

	DECLARE @FACILITY_ID INT
	SET @FACILITY_ID = (SELECT FACILITY_ID FROM GYM_FACILITY WHERE FACILITY_NAME = @FACILITY_NAME)

	INSERT INTO GYM_STAFF(EMPLOYEE_ID, FACILITY_ID, STAFF_ROLE, STAFF_HOURLY_PAY)
	VALUES(@EMPLOYEE_ID, @FACILITY_ID, @STAFF_ROLE, @STAFF_HOURLY_PAY)
END
GO

CREATE PROCEDURE SP_ADD_GYM_MEMBERSHIP @MEMBERSHIP_TYPE VARCHAR(25), @MEMBERSHIP_PRICE FLOAT
AS
BEGIN
	IF NOT EXISTS(SELECT MEMBERSHIP_TYPE, MEMBERSHIP_PRICE FROM GYM_MEMBERSHIP WHERE MEMBERSHIP_TYPE = @MEMBERSHIP_TYPE AND MEMBERSHIP_PRICE = @MEMBERSHIP_PRICE)
	BEGIN
		INSERT INTO GYM_MEMBERSHIP(MEMBERSHIP_TYPE, MEMBERSHIP_PRICE)
		VALUES(@MEMBERSHIP_TYPE, @MEMBERSHIP_PRICE)
	END
END
GO

--CREATE PROCEDURE DATA POPULATION
GO
CREATE PROCEDURE SP_DATA_POPULATION
AS
BEGIN
	--ADD VALUES TO COSTUMER
	exec SP_ADD_GYM_CUSTOMER 'Patrick','Manacorda', '06-26-1998'
	exec SP_ADD_GYM_CUSTOMER 'Mike','Koenig', '01-01-1975'
	exec SP_ADD_GYM_CUSTOMER 'Zach', 'Zeiler', '01-03-1992'

	--ADD VALUES TO REGION
	exec SP_ADD_GYM_REGION 'Seattle'
	exec SP_ADD_GYM_REGION 'Milan'

	--ADD VALUES TO FACILITY
	exec SP_ADD_GYM_FACILITY 'Go Mad Fitness', 'Seattle', '914 East Jefferson Street'
	exec SP_ADD_GYM_FACILITY 'Mayweather Fitness', 'Milan', 'Metro Duomo Milano Centrale'

	--ADD VALUES TO EMPLOYEE
	exec SP_ADD_GYM_EMPLOYEE 'Arnold','Swcharzanneger','01-01-1950'
	exec SP_ADD_GYM_EMPLOYEE 'Kai','Greene','01-01-1960'
	exec SP_ADD_GYM_EMPLOYEE 'Sabrina','Rowe','01-01-1970'
	exec SP_ADD_GYM_EMPLOYEE 'Deirdre', 'Mccready', '01-01-1963'
	
	--ADD VALUES TO MEMBERSHIP
	exec SP_ADD_GYM_MEMBERSHIP 'OPEN GYM', 45.00
	exec SP_ADD_GYM_MEMBERSHIP 'CLASSES', 60.00

	--ADD VALUES TO SIGNUP
	exec SP_ADD_GYM_SIGNUP 'Patrick','Manacorda', 'OPEN GYM', 'Milan', '01-01-2018', '01-07-2020'
	exec SP_ADD_GYM_SIGNUP 'Mike','Koenig','CLASSES', 'Seattle', '01-01-2019', '01-02-2021'
	exec SP_ADD_GYM_SIGNUP 'Mike', 'Koenig', 'CLASSES', 'Milan', '01-01-2019', '01-03-2021'
	exec SP_ADD_GYM_SIGNUP 'Mike', 'Koenig', 'OPEN GYM', 'Seattle', '01-01-2019', '01-04-2022'
	exec SP_ADD_GYM_SIGNUP 'Zach','Zeiler','OPEN GYM', 'Milan', '01-01-2017', '01-06-2022'
	exec SP_ADD_GYM_SIGNUP 'Zach', 'Zeiler', 'CLASSES', 'Milan', '01-01-2017', '01-06-2022'

	--ADD VALUES TO STAFF
	exec SP_ADD_GYM_STAFF 'Arnold','Swcharzanneger','Go Mad Fitness', 'Trainer', 22.50
	exec SP_ADD_GYM_STAFF 'Arnold','Swcharzanneger', 'Mayweather Fitness', 'Trainer', 22.50
	exec SP_ADD_GYM_STAFF 'Kai','Greene','Mayweather Fitness', 'Trainer', 27.95
	exec SP_ADD_GYM_STAFF 'Sabrina','Rowe', 'Mayweather Fitness', 'Front Desk', 22.75
	exec SP_ADD_GYM_STAFF 'Deirdre', 'Mccready','Go Mad Fitness', 'Cleaning', 20.75
	exec SP_ADD_GYM_STAFF 'Deirdre', 'Mccready', 'Mayweather Fitness', 'Front Desk', 20.75

END
GO

exec SP_DATA_POPULATION

--DROP VIEWS
DROP VIEW IF EXISTS VIEW_PAYROLL
DROP VIEW IF EXISTS VIEW_MEMBERSHIP_SIGNUPS
DROP VIEW IF EXISTS VIEW_MEMEBERSHIPS
GO


CREATE VIEW VIEW_PAYROLL AS
SELECT EMPLOYEE_NAME_F,EMPLOYEE_NAME_L, STAFF_ROLE, FACILITY_NAME, STAFF_HOURLY_PAY FROM GYM_EMPLOYEE
JOIN GYM_STAFF ON GYM_STAFF.EMPLOYEE_ID = GYM_EMPLOYEE.EMPLOYEE_ID
JOIN GYM_FACILITY ON GYM_FACILITY.FACILITY_ID = GYM_STAFF.FACILITY_ID
GO

CREATE VIEW VIEW_MEMBERSHIPS
AS
SELECT GYM_MEMBERSHIP.MEMBERSHIP_TYPE, GYM_MEMBERSHIP.MEMBERSHIP_PRICE, (SELECT AVG(MEMBERSHIP_PRICE) FROM GYM_MEMBERSHIP) AS AVG_PRICE FROM GYM_MEMBERSHIP
GROUP BY MEMBERSHIP_TYPE, MEMBERSHIP_PRICE
GO

CREATE VIEW VIEW_MEMBERSHIP_SIGNUPS
AS
SELECT CUSTOMER_NAME_F, CUSTOMER_NAME_L, MEMBERSHIP_TYPE, REGION_NAME FROM GYM_CUSTOMER
JOIN GYM_SIGNUP ON GYM_SIGNUP.CUSTOMER_ID = GYM_CUSTOMER.CUSTOMER_ID
JOIN GYM_MEMBERSHIP ON GYM_MEMBERSHIP.MEMBERSHIP_ID = GYM_SIGNUP.MEMBERSHIP_ID
JOIN GYM_REGION ON GYM_SIGNUP.REGION_ID = GYM_REGION.REGION_ID
GO


--SHOW DATA PROCEDURE
DROP PROCEDURE IF EXISTS SP_DATA_SHOW
GO
CREATE PROCEDURE SP_DATA_SHOW
AS
BEGIN
DECLARE @EMPLOYEE_NAME_F VARCHAR(25)
DECLARE @EMPLOYEE_NAME_L VARCHAR(25)
DECLARE @FACILITY_NAME VARCHAR(25)
DECLARE @ROLE VARCHAR(25)
DECLARE @PAY FLOAT
DECLARE @PADDING_A INT
SET @PADDING_A = 20
DECLARE @PADDING_B INT
SET @PADDING_B = 10

DECLARE MYCURSOR CURSOR STATIC FOR
SELECT EMPLOYEE_NAME_F, EMPLOYEE_NAME_L, STAFF_ROLE, FACILITY_NAME, STAFF_HOURLY_PAY FROM VIEW_PAYROLL
ORDER BY EMPLOYEE_NAME_F, EMPLOYEE_NAME_L


PRINT '-------------PAYROLL-------------'
PRINT '        Employee name' + char(9) + ' |    Role ' + char(9) + '|        Facility' + char(9) +'|      Hourly Pay'


OPEN MYCURSOR
FETCH NEXT FROM MYCURSOR INTO @EMPLOYEE_NAME_F, @EMPLOYEE_NAME_L, @ROLE, @FACILITY_NAME, @PAY

DECLARE @MESSAGE VARCHAR(100)

WHILE @@FETCH_STATUS = 0
BEGIN
	SELECT @MESSAGE = concat(char(9),' ', 
		CONCAT(concat(@EMPLOYEE_NAME_F, ' ' ,@EMPLOYEE_NAME_L), SPACE(@PADDING_A - LEN(concat(@EMPLOYEE_NAME_F, ' ' ,@EMPLOYEE_NAME_L)))),' ',
		char(9),' ', 
		concat(@ROLE, SPACE(@PADDING_B-LEN(@ROLE))), ' ', char(9),
		CONCAT(@FACILITY_NAME, SPACE(@PADDING_A - LEN(@FACILITY_NAME))), ' ',
		char(9), ' ',
		@PAY
		)
	PRINT @Message 
	FETCH NEXT FROM MYCURSOR INTO @EMPLOYEE_NAME_F, @EMPLOYEE_NAME_L, @ROLE, @FACILITY_NAME, @PAY
END

CLOSE MYCURSOR
DEALLOCATE MYCURSOR

-----------------------------------------------------------
DECLARE MYCURSOR CURSOR STATIC FOR
SELECT MEMBERSHIP_TYPE, MEMBERSHIP_PRICE, AVG_PRICE FROM VIEW_MEMBERSHIPS

DECLARE @TYPE VARCHAR(25)
DECLARE @PRICE FLOAT
DECLARE @AVG_PRICE FLOAT

OPEN MYCURSOR
FETCH NEXT FROM MYCURSOR INTO @TYPE, @PRICE, @AVG_PRICE

PRINT '-------------MEMBERSHIP TYPES-------------'
PRINT 'Average Membership price: ' + CONVERT(VARCHAR(25),@AVG_PRICE) + '$ '
PRINT 'MEMBERSHIP NAME ' + char(9) + '|   PRICE '




WHILE @@FETCH_STATUS = 0
BEGIN
	SELECT @MESSAGE = concat(char(9),' ', 
		CONCAT(@TYPE, SPACE(@PADDING_B-LEN(@TYPE))),
		char(9),' ', 
		CONCAT(SPACE(@PADDING_B-LEN(@PRICE)), @PRICE), '$'
		)
	PRINT @Message 
	FETCH NEXT FROM MYCURSOR INTO @TYPE, @PRICE, @AVG_PRICE
END

CLOSE MYCURSOR
DEALLOCATE MYCURSOR

--------------------------------------------------

DECLARE MYCURSOR CURSOR STATIC FOR
SELECT CUSTOMER_NAME_F, CUSTOMER_NAME_L, MEMBERSHIP_TYPE, REGION_NAME FROM VIEW_MEMBERSHIP_SIGNUPS
ORDER BY CUSTOMER_NAME_F, CUSTOMER_NAME_L

DECLARE @CUSTOMER_NAME_F VARCHAR(25)
DECLARE @CUSTOMER_NAME_L VARCHAR(25)
DECLARE @MEMBERSHIP_TYPE VARCHAR(25)
DECLARE @REGION_NAME VARCHAR(25)
DECLARE @NUMBER_CUSTOMERS INT
SET @NUMBER_CUSTOMERS = (SELECT COUNT(DISTINCT CONCAT(CUSTOMER_NAME_F, CUSTOMER_NAME_L)) FROM VIEW_MEMBERSHIP_SIGNUPS)

PRINT '-------------MEMBERSHIP CUSTOMERS-------------'
PRINT 'NUMBER OF UNIQUE CUSTOMERS: ' + CONVERT(VARCHAR(25),@NUMBER_CUSTOMERS)
PRINT '     CUSTOMER ' + char(9) + '      |     MEMEBERSHP     |' + char(9) + '   REGION'

OPEN MYCURSOR
FETCH NEXT FROM MYCURSOR INTO @CUSTOMER_NAME_F, @CUSTOMER_NAME_L, @MEMBERSHIP_TYPE, @REGION_NAME

WHILE @@FETCH_STATUS = 0
BEGIN
	SELECT @MESSAGE = concat(char(9),' ', 
		CONCAT(CONCAT(@CUSTOMER_NAME_F,' ', @CUSTOMER_NAME_L), SPACE(@PADDING_A - LEN(CONCAT(@CUSTOMER_NAME_F, @CUSTOMER_NAME_L)))),
		char(9), ' ',
		CONCAT(@MEMBERSHIP_TYPE, SPACE(@PADDING_A - LEN(@MEMBERSHIP_TYPE))),  ' ',
		char(9), ' ',
		@REGION_NAME
		)
	PRINT @Message 
	FETCH NEXT FROM MYCURSOR INTO @CUSTOMER_NAME_F, @CUSTOMER_NAME_L, @MEMBERSHIP_TYPE, @REGION_NAME
END

CLOSE MYCURSOR
DEALLOCATE MYCURSOR


END
GO

exec SP_DATA_SHOW